substitutions:
  device_name: remeha
  friendly_name: Remeha Tzerra

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  build_path: "../build/${device_name}"

esp32:
  board: esp32dev
  framework:
    type: arduino

external_components:
- source: github://hencou/esphome_gvret
  components: [canbus_gvret]
  refresh: 0s

  
# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:

ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

#interval:
#- interval: 10s
#  then:
#  - canbus.send:
#      data: [ 0x40, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00 ]
#      canbus_id: my_canbus
#  - canbus.send:
#      data: [0x40, 0x0b, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00 ]
#      canbus_id: my_canbus
#  - canbus.send:
#      data: [0x40, 0x0c, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00 ]
#      canbus_id: my_canbus

sensor:
#- platform: template
#  name: ${friendly_name} Power
#  id: ${device_name}_power
- platform: template
  name: ${friendly_name} Flow temperatuur
  id: ${device_name}_flow_temperature
#- platform: template
#  name: ${friendly_name} Setpoint
#  id: ${device_name}_setpoint
- platform: template
  name: ${friendly_name} Buiten temperatuur
  id: ${device_name}_outside_temp
- platform: template
  name: ${friendly_name} Test2
  id: ${device_name}_test2
- platform: template
  name: ${friendly_name} Test3
  id: ${device_name}_test3
- platform: template
  name: ${friendly_name} Test4
  id: ${device_name}_test4
- platform: template
  name: ${friendly_name} Test5
  id: ${device_name}_test5
- platform: template
  name: ${friendly_name} Test6
  id: ${device_name}_test6
- platform: template
  name: ${friendly_name} Test7
  id: ${device_name}_test7

text_sensor:
- platform: template
  name: ${friendly_name} Status
  id: ${device_name}_status

canbus:
- platform: esp32_can
  id: my_canbus
  tx_pin: GPIO5
  rx_pin: GPIO35
  can_id: 0x241
  bit_rate: 1000kbps
  # increase queue sizes for CANOpen block transfer (up to 128 frames can be sent in burst)
  tx_queue_len: 128
  rx_queue_len: 128
  on_frame:
  - can_id: 0x282
    then:
    - lambda: |-
        if(x.size() > 0) {
          
          //Byte1 = Power: klopt niet, is iets anders, loopt langzaam af teller oid
          //uint8_t power = x[1];
          //id(${device_name}_power).publish_state(power);
          
          //Byte 2+3 = Flow temperature
          uint8_t A = x[2];
          uint8_t B = x[3];
          float flow_temp = (((uint16_t)A << 8) + B) / 100.00;
          id(${device_name}_flow_temperature).publish_state(flow_temp);
        }

  - can_id: 0x381
    then:
    - lambda: |-
        if(x.size() > 0) {
          
          //Byte 0+1 = Outside temperature
          uint8_t A = x[0];
          uint8_t B = x[1];
          float out_temp = ((((uint16_t)B << 8) + A) / 100.00);
          id(${device_name}_outside_temp).publish_state(out_temp);
        }
        
  - can_id: 0x481
    then:
    - lambda: |-
        if(x.size() > 0) {

          //Byte1 = Status
          uint8_t status = x[1];
          String statustext;
          switch(status) {
            case 0:
              statustext="stand-by";
              break;
            case 1:
              statustext="demand";
              break;
            case 2:
              statustext="start generator";
              break;
            case 3:
              statustext="heat active";
              break;
            case 4:
              statustext="dhw active";
              break;
            case 5:
              statustext="stop generator";
              break;
            case 6:
              statustext="pump active";
              break;
            case 8:
              statustext="delay";
              break;
            case 9:
              statustext="block";
              break;
            case 10:
              statustext="lock";
              break;
            case 11:
              statustext="test heat min";
              break;
            case 12:
              statustext="test heat max";
              break;
            case 13:
              statustext="test DWH max";
              break;
            case 15:
              statustext="manual heat";
              break;
            case 16:
              statustext="frost protection";
              break;
            case 19:
              statustext="reset";
              break;
            case 21:
              statustext="paused";
              break;
            case 30:
              statustext="dhw active";
              break;
            case 37:
              statustext="dhw active";
              break;
            case 40:
              statustext="dhw active";
              break;
            case 41:
              statustext="dhw active";
              break;
            case 200:
              statustext="service mode";
              break;
            default:
              statustext="unknown";
          }
          id(${device_name}_status).publish_state(statustext.c_str());
        }

  - can_id: 0x482
    then:
    - lambda: |-
        if(x.size() > 0) {
          if(x[0] == 0x01 && x[1] == 0x03) {
            
            id(${device_name}_test2).publish_state(float(x[2]));
            id(${device_name}_test3).publish_state(float(x[3]));
            id(${device_name}_test4).publish_state(float(x[4]));
            id(${device_name}_test5).publish_state(float(x[5]));
            id(${device_name}_test6).publish_state(float(x[6]));
            id(${device_name}_test7).publish_state(float(x[7]));
          }
        }
        

# GVRET component to use with SavvyCAN for remote CANbus message analysis
- platform: canbus_gvret
  id: gvret
  can_id: 0
  canbus_id: my_canbus
